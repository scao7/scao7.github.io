<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Shengting Cao&#39;s  Notebook  ᕦʕ •ᴥ•ʔᕤ </title>
    <link>https://shengtingcao.top/blog/</link>
    <description>Recent content in Blog on Shengting Cao&#39;s  Notebook  ᕦʕ •ᴥ•ʔᕤ </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 09 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://shengtingcao.top/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>GitHub New Security Config</title>
      <link>https://shengtingcao.top/blog/github_token/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shengtingcao.top/blog/github_token/</guid>
      <description>GitHub has recently upgraded its authentication protocol, shifting from a password-based approach to a more secure token-based system. While this update certainly boosts repository security, it does come with a slight trade-off in terms of convenience. I&amp;rsquo;ve taken some notes on how to adapt to these changes on GitHub:
The first step is to request a token directly from GitHub. Instead of inputting your password when pushing code, you should now employ this token as your GitHub account password.</description>
    </item>
    
    <item>
      <title>WebGL for Koch Snowflake</title>
      <link>https://shengtingcao.top/blog/snoflake/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shengtingcao.top/blog/snoflake/</guid>
      <description>Problem Description Draw the Koch snowflake using recursive method with javascript!
Calculate the point for the Koch lines function calculatePoint(center, p){ var angleInDegrees = 60; var angleInRadians = angleInDegrees * Math.PI / 180; var s1 = Math.sin(angleInRadians); var c1 = Math.cos(angleInRadians); var x1 = (p[0] - center[0]) * c1 - (p[1] - center[1])* s1 + center[0]; var y1 = (p[0] - center[0]) * s1 + (p[1] - center[1])* c1 + center[1]; var f = vec2(x1,y1); return f; } Divide line into koch line and call the function recursively function divideLine(a, b,count) { if(count === 0){ var left; var right; left = mix(a,b,1/3); right = mix(a,b,2/3); var f = calculatePoint(left,right); drawLine(a,left,f,right,b); } else { var ab = mix (a,b,0.</description>
    </item>
    
  </channel>
</rss>
