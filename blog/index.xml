<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Shengting Cao&#39;s Page | ᕦʕ •ᴥ•ʔᕤ </title>
    <link>https://shengtingcao.top/blog/</link>
    <description>Recent content in Blog on Shengting Cao&#39;s Page | ᕦʕ •ᴥ•ʔᕤ </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 26 Nov 2023 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://shengtingcao.top/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Buid Home Raspberry Pi NAS</title>
      <link>https://shengtingcao.top/blog/raspberrypi_nas_tutorial/</link>
      <pubDate>Sun, 26 Nov 2023 00:00:00 +0000</pubDate>
      <guid>https://shengtingcao.top/blog/raspberrypi_nas_tutorial/</guid>
      <description>&lt;p&gt;NAS, or Network Attached Storage, is a specialized storage device connected to a network, providing centralized file-level data access to multiple users and devices. It facilitates convenient data sharing, backup, and storage management within a local network environment.&lt;/p&gt;&#xA;&lt;p&gt;In this tutorial, I will go trough the process of buding a working NAS using raspberry pi and external drive as well as a plex server for video streaming at home netowrk. I will also explain the neccesarry problems that enconterd and the solution of the problems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to do image processing in Android?</title>
      <link>https://shengtingcao.top/blog/imageprocessinginandroid/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate>
      <guid>https://shengtingcao.top/blog/imageprocessinginandroid/</guid>
      <description>&lt;p&gt;My software is used in this poster&lt;/p&gt;&#xA;&lt;p&gt;&lt;img src=&#34;https://shengtingcao.top/2020/12/bodyvolume.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;android-canvas&#34;&gt;Android Canvas&lt;/h2&gt;&#xA;&lt;p&gt;This section is the design one function in Android: pick up a photo from gallery and desplay in the App.&lt;/p&gt;&#xA;&lt;h4 id=&#34;tool&#34;&gt;Tool&lt;/h4&gt;&#xA;&lt;p&gt;I used Android Studio to develop my app. It is a mature technology that helps me to build app easily.&lt;/p&gt;&#xA;&lt;h5 id=&#34;add-imageview-and-button&#34;&gt;Add ImageView and Button&lt;/h5&gt;&#xA;&lt;p&gt;In the &amp;ldquo;activity_main.xml&amp;rdquo; add a Button like this:&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;Button&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:id&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@+id/open_picture&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;style&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@style/Base.Widget.AppCompat.Button.Colored&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_width&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;match_parent&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:layout_height&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;wrap_content&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#a6e22e&#34;&gt;android:text&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;@string/open_picture&amp;#34;&lt;/span&gt; /&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Also add the ImageView:&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to design your own programming language?</title>
      <link>https://shengtingcao.top/blog/howtowriteyourprogramminglanguage/</link>
      <pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate>
      <guid>https://shengtingcao.top/blog/howtowriteyourprogramminglanguage/</guid>
      <description>&lt;h2 id=&#34;programming-laguage-requirement&#34;&gt;Programming laguage requirement&lt;/h2&gt;&#xA;&lt;p&gt;A typical programming language supports a wide range of features and capabilities that enable developers to write, compile, and execute code to solve various computational problems. While the specific features and capabilities can vary between programming languages, here are some common elements that are typically supported in programming languages:&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;strong&gt;Data Types&lt;/strong&gt;: Programming languages support various data types such as integers, floating-point numbers, characters, strings, booleans, arrays, and more. Some languages also allow users to define custom data types.&lt;/p&gt;</description>
    </item>
    <item>
      <title>GitHub New Security Config</title>
      <link>https://shengtingcao.top/blog/github_token/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      <guid>https://shengtingcao.top/blog/github_token/</guid>
      <description>&lt;p&gt;GitHub has recently upgraded its authentication protocol, shifting from a password-based approach to a more secure token-based system. While this update certainly boosts repository security, it does come with a slight trade-off in terms of convenience. I&amp;rsquo;ve taken some notes on how to adapt to these changes on GitHub:&lt;/p&gt;&#xA;&lt;p&gt;The first step is to request a token directly from GitHub. Instead of inputting your password when pushing code, you should now employ this token as your GitHub account password.&lt;/p&gt;</description>
    </item>
    <item>
      <title>How to Enable Latex in The Blog?</title>
      <link>https://shengtingcao.top/blog/latexsyntax/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://shengtingcao.top/blog/latexsyntax/</guid>
      <description>&lt;h4 id=&#34;enable-latax-on-webpage&#34;&gt;Enable LaTax on webpage&lt;/h4&gt;&#xA;&lt;p&gt;Add this HTML code into &lt;strong&gt;site-footer.html&lt;/strong&gt; file because I use this template for every posts page.&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-HTML&#34; data-lang=&#34;HTML&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- enable math in the blog  --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;link&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;rel&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;stylesheet&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- The loading of KaTeX is deferred to speed up page rendering --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#75715e&#34;&gt;&amp;lt;!-- To automatically render math in text elements, include the auto-render extension: --&amp;gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &amp;lt;&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;defer&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;src&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/contrib/auto-render.min.js&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;integrity&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;sha384-kWPLUVMOks5AQFrykwIup5lo0m3iMkkHrD0uJ4H5cjeGihAutqP0yW0J6dpFiVkI&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;crossorigin&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;anonymous&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#a6e22e&#34;&gt;onload&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;renderMathInElement(document.body);&amp;#34;&lt;/span&gt;&amp;gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;script&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;head&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&amp;lt;/&lt;span style=&#34;color:#f92672&#34;&gt;html&lt;/span&gt;&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Code and the rendered example&lt;/p&gt;</description>
    </item>
    <item>
      <title>WebGL for Koch Snowflake</title>
      <link>https://shengtingcao.top/blog/snoflake/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://shengtingcao.top/blog/snoflake/</guid>
      <description>&lt;h4 id=&#34;problem-description&#34;&gt;Problem Description&lt;/h4&gt;&#xA;&lt;p&gt;Draw the Koch snowflake using recursive method with javascript!&lt;/p&gt;&#xA;&lt;h4 id=&#34;calculate-the-point-for-the-koch-lines&#34;&gt;Calculate the point for the Koch lines&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;function calculatePoint(center, p){&#xA;  var angleInDegrees = 60;&#xA;  var angleInRadians = angleInDegrees * Math.PI / 180;&#xA;  var s1 = Math.sin(angleInRadians);&#xA;  var c1 = Math.cos(angleInRadians);&#xA;  var x1 = (p[0] - center[0]) * c1 - (p[1] - center[1])* s1 + center[0];&#xA;  var y1 = (p[0] - center[0]) * s1 + (p[1] - center[1])* c1 + center[1];&#xA;  var f = vec2(x1,y1);&#xA;  return f;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;divide-line-into-koch-line-and-call-the-function-recursively&#34;&gt;Divide line into koch line and call the function recursively&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;function divideLine(a, b,count)&#xA;{&#xA;  if(count === 0){&#xA;    var left;&#xA;    var right;&#xA;    left = mix(a,b,1/3);&#xA;    right = mix(a,b,2/3);&#xA;    var f = calculatePoint(left,right);&#xA;    drawLine(a,left,f,right,b);&#xA;  }&#xA;  else {&#xA;    var ab = mix (a,b,0.3333);&#xA;    var ba = mix (b,a,0.3333);&#xA;    var v = calculatePoint(ab, ba);&#xA;    count --;&#xA;    divideLine(a,ab,count);&#xA;    divideLine(ba,b,count);&#xA;    divideLine(ab,v,count);&#xA;    divideLine(v,ba,count);&#xA;  }&#xA;    return f;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;draw-a-snowflake-by-calling-the-divideline-function-three-times&#34;&gt;Draw a snowflake by calling the divideLine function three times&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;function snowflake(a,b,c,count){&#xA;    divideLine(a,b,count);&#xA;    divideLine(b,c,count);&#xA;    divideLine(c,a,count);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://scao7.github.io/ComputerGraphics/project1/snowflake.html&#34;&gt;Project Link&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>VIM Note</title>
      <link>https://shengtingcao.top/blog/vimnote/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://shengtingcao.top/blog/vimnote/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://vim.rtorr.com/&#34;&gt;reference 1, vim cheat sheet&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.cs.oberlin.edu/~kuperman/help/vim/home.html&#34;&gt;reference 2, vim command summary&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h4 id=&#34;multi-window&#34;&gt;multi-window&lt;/h4&gt;&#xA;&lt;h5 id=&#34;lmuti-window-basic-operations&#34;&gt;&lt;!-- raw HTML omitted --&gt;lmuti-window basic operations &lt;!-- raw HTML omitted --&gt;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt; :e filename      - edit another file&#xA; :split filename  - split window and load another file&#xA; ctrl-w up arrow  - move cursor up a window&#xA; ctrl-w ctrl-w    - move cursor to another window (cycle)&#xA; ctrl-w_          - maximize current window&#xA; ctrl-w=          - make all equal size&#xA; 10 ctrl-w+       - increase window size by 10 lines&#xA; :vsplit file     - vertical split&#xA; :sview file      - same as split, but readonly&#xA; :hide            - close current window&#xA; :only            - keep only this window open&#xA; :ls              - show current buffers&#xA; :b 2             - open buffer #2 in this window&#xA; :bnext or :bn - go to the next buffer&#xA; :bprev or :bp - go to the previous buffer&#xA; :bd - delete a buffer (close a file)&#xA; :ls - list all open buffers&#xA; :sp file - open a file in a new buffer and split window&#xA; :vsp file - open a file in a new buffer and vertically split window&#xA; Ctrl + ws - split window&#xA; Ctrl + ww - switch windows&#xA; Ctrl + wq - quit a window&#xA; Ctrl + wv - split window vertically&#xA; Ctrl + wh - move cursor to the left window (vertical split)&#xA; Ctrl + wl - move cursor to the right window (vertical split)&#xA; Ctrl + wj - move cursor to the window below (horizontal split)&#xA; Ctrl + wk - move cursor to the window above (horizontal split)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;cursor-movement&#34;&gt;cursor movement&lt;/h4&gt;&#xA;&lt;h5 id=&#34;cursor-movement-1&#34;&gt;&lt;!-- raw HTML omitted --&gt;cursor movement&lt;!-- raw HTML omitted --&gt;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;h - move cursor left&#xA;j - move cursor down&#xA;k - move cursor up&#xA;l - move cursor right&#xA;H - move to top of screen&#xA;M - move to middle of screen&#xA;L - move to bottom of screen&#xA;w - jump forwards to the start of a word&#xA;W - jump forwards to the start of a word (words can contain punctuation)&#xA;e - jump forwards to the end of a word&#xA;E - jump forwards to the end of a word (words can contain punctuation)&#xA;b - jump backwards to the start of a word&#xA;B - jump backwards to the start of a word (words can contain punctuation)&#xA;% - move to matching character (default supported pairs: &amp;#39;()&amp;#39;, &amp;#39;{}&amp;#39;, &amp;#39;[]&amp;#39; - use &amp;lt;code&amp;gt;:h matchpairs&amp;lt;/code&amp;gt; in vim for more info)&#xA;0 - jump to the start of the line&#xA;^ - jump to the first non-blank character of the line&#xA;$ - jump to the end of the line&#xA;g_ - jump to the last non-blank character of the line&#xA;gg - go to the first line of the document&#xA;G - go to the last line of the document&#xA;5G - go to line 5&#xA;fx - jump to next occurrence of character x&#xA;tx - jump to before next occurrence of character x&#xA;Fx - jump to previous occurence of character x&#xA;Tx - jump to after previous occurence of character x&#xA;; - repeat previous f, t, F or T movement&#xA;, - repeat previous f, t, F or T movement, backwards&#xA;} - jump to next paragraph (or function/block, when editing code)&#xA;{ - jump to previous paragraph (or function/block, when editing code)&#xA;zz - center cursor on screen&#xA;Ctrl + e - move screen down one line (without moving cursor)&#xA;Ctrl + y - move screen up one line (without moving cursor)&#xA;Ctrl + b - move back one full screen&#xA;Ctrl + f -&#xA;Ctrl + d -&#xA;Ctrl + u -&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h4 id=&#34;search-and-replace&#34;&gt;Search and replace&lt;/h4&gt;&#xA;&lt;h5 id=&#34;search-and-replace-1&#34;&gt;&lt;!-- raw HTML omitted --&gt;Search and replace&lt;!-- raw HTML omitted --&gt;&lt;/h5&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;/pattern - search for pattern&#xA;?pattern - search backward for pattern&#xA;\vpattern - &amp;#39;very magic&amp;#39; pattern: non-alphanumeric characters are interpreted as special regex symbols (no escaping needed)&#xA;n - repeat search in same direction&#xA;N - repeat search in opposite direction&#xA;:%s/old/new/g - replace all old with new throughout file&#xA;:%s/old/new/gc - replace all old with new throughout file with confirmations&#xA;:noh - remove highlighting of search matches&#xA;Search in multiple files&#xA;:vimgrep /pattern/ {file} - search for pattern in multiple files&#xA;&#x9;e.g.:vimgrep /foo/ **/*&#xA;:cn - jump to the next match&#xA;:cp - jump to the previous match&#xA;:copen - open a window containing the list of matches&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
