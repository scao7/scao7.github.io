<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Shengting Cao&#39;s  Notebook  ᕦʕ •ᴥ•ʔᕤ </title>
    <link>https://shengtingcao.top/blog/</link>
    <description>Recent content in Blog on Shengting Cao&#39;s  Notebook  ᕦʕ •ᴥ•ʔᕤ </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://shengtingcao.top/blog/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>How to do image processing in Android?</title>
      <link>https://shengtingcao.top/blog/imageprocessinginandroid/</link>
      <pubDate>Tue, 03 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://shengtingcao.top/blog/imageprocessinginandroid/</guid>
      <description>My software is used in this poster
Android Canvas This section is the design one function in Android: pick up a photo from gallery and desplay in the App.
Tool I used Android Studio to develop my app. It is a mature technology that helps me to build app easily.
Add ImageView and Button In the &amp;ldquo;activity_main.xml&amp;rdquo; add a Button like this:
&amp;lt;Button android:id=&amp;#34;@+id/open_picture&amp;#34; style=&amp;#34;@style/Base.Widget.AppCompat.Button.Colored&amp;#34; android:layout_width=&amp;#34;match_parent&amp;#34; android:layout_height=&amp;#34;wrap_content&amp;#34; android:text=&amp;#34;@string/open_picture&amp;#34; /&amp;gt; Also add the ImageView:</description>
    </item>
    
    <item>
      <title>How to design your own programming language?</title>
      <link>https://shengtingcao.top/blog/howtowriteyourprogramminglanguage/</link>
      <pubDate>Sun, 25 Sep 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shengtingcao.top/blog/howtowriteyourprogramminglanguage/</guid>
      <description>Programming laguage requirement A typical programming language supports a wide range of features and capabilities that enable developers to write, compile, and execute code to solve various computational problems. While the specific features and capabilities can vary between programming languages, here are some common elements that are typically supported in programming languages:
Data Types: Programming languages support various data types such as integers, floating-point numbers, characters, strings, booleans, arrays, and more.</description>
    </item>
    
    <item>
      <title>GitHub New Security Config</title>
      <link>https://shengtingcao.top/blog/github_token/</link>
      <pubDate>Wed, 09 Feb 2022 00:00:00 +0000</pubDate>
      
      <guid>https://shengtingcao.top/blog/github_token/</guid>
      <description>GitHub has recently upgraded its authentication protocol, shifting from a password-based approach to a more secure token-based system. While this update certainly boosts repository security, it does come with a slight trade-off in terms of convenience. I&amp;rsquo;ve taken some notes on how to adapt to these changes on GitHub:
The first step is to request a token directly from GitHub. Instead of inputting your password when pushing code, you should now employ this token as your GitHub account password.</description>
    </item>
    
    <item>
      <title>How to Enable Latex in The Blog?</title>
      <link>https://shengtingcao.top/blog/latexsyntax/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shengtingcao.top/blog/latexsyntax/</guid>
      <description>Enable LaTax on webpage Add this HTML code into site-footer.html file because I use this template for every posts page.
&amp;lt;!-- enable math in the blog --&amp;gt; &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;!-- KaTeX requires the use of the HTML5 doctype. Without it, KaTeX may not render properly --&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;link rel=&amp;#34;stylesheet&amp;#34; href=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.css&amp;#34; integrity=&amp;#34;sha384-zB1R0rpPzHqg7Kpt0Aljp8JPLqbXI3bhnPWROx27a9N0Ll6ZP/+DiW/UqRcLbRjq&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt; &amp;lt;!-- The loading of KaTeX is deferred to speed up page rendering --&amp;gt; &amp;lt;script defer src=&amp;#34;https://cdn.jsdelivr.net/npm/katex@0.11.1/dist/katex.min.js&amp;#34; integrity=&amp;#34;sha384-y23I5Q6l+B6vatafAwxRu/0oK/79VlbSz7Q9aiSZUvyWYIYsd+qj+o24G5ZU2zJz&amp;#34; crossorigin=&amp;#34;anonymous&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;!</description>
    </item>
    
    <item>
      <title>WebGL for Koch Snowflake</title>
      <link>https://shengtingcao.top/blog/snoflake/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>https://shengtingcao.top/blog/snoflake/</guid>
      <description>Problem Description Draw the Koch snowflake using recursive method with javascript!
Calculate the point for the Koch lines function calculatePoint(center, p){ var angleInDegrees = 60; var angleInRadians = angleInDegrees * Math.PI / 180; var s1 = Math.sin(angleInRadians); var c1 = Math.cos(angleInRadians); var x1 = (p[0] - center[0]) * c1 - (p[1] - center[1])* s1 + center[0]; var y1 = (p[0] - center[0]) * s1 + (p[1] - center[1])* c1 + center[1]; var f = vec2(x1,y1); return f; } Divide line into koch line and call the function recursively function divideLine(a, b,count) { if(count === 0){ var left; var right; left = mix(a,b,1/3); right = mix(a,b,2/3); var f = calculatePoint(left,right); drawLine(a,left,f,right,b); } else { var ab = mix (a,b,0.</description>
    </item>
    
    <item>
      <title>VIM Note</title>
      <link>https://shengtingcao.top/blog/vimnote/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://shengtingcao.top/blog/vimnote/</guid>
      <description>reference 1, vim cheat sheet
reference 2, vim command summary
multi-window lmuti-window basic operations :e filename - edit another file :split filename - split window and load another file ctrl-w up arrow - move cursor up a window ctrl-w ctrl-w - move cursor to another window (cycle) ctrl-w_ - maximize current window ctrl-w= - make all equal size 10 ctrl-w+ - increase window size by 10 lines :vsplit file - vertical split :sview file - same as split, but readonly :hide - close current window :only - keep only this window open :ls - show current buffers :b 2 - open buffer #2 in this window :bnext or :bn - go to the next buffer :bprev or :bp - go to the previous buffer :bd - delete a buffer (close a file) :ls - list all open buffers :sp file - open a file in a new buffer and split window :vsp file - open a file in a new buffer and vertically split window Ctrl + ws - split window Ctrl + ww - switch windows Ctrl + wq - quit a window Ctrl + wv - split window vertically Ctrl + wh - move cursor to the left window (vertical split) Ctrl + wl - move cursor to the right window (vertical split) Ctrl + wj - move cursor to the window below (horizontal split) Ctrl + wk - move cursor to the window above (horizontal split) cursor movement cursor movement h - move cursor left j - move cursor down k - move cursor up l - move cursor right H - move to top of screen M - move to middle of screen L - move to bottom of screen w - jump forwards to the start of a word W - jump forwards to the start of a word (words can contain punctuation) e - jump forwards to the end of a word E - jump forwards to the end of a word (words can contain punctuation) b - jump backwards to the start of a word B - jump backwards to the start of a word (words can contain punctuation) % - move to matching character (default supported pairs: &amp;#39;()&amp;#39;, &amp;#39;{}&amp;#39;, &amp;#39;[]&amp;#39; - use &amp;lt;code&amp;gt;:h matchpairs&amp;lt;/code&amp;gt; in vim for more info) 0 - jump to the start of the line ^ - jump to the first non-blank character of the line $ - jump to the end of the line g_ - jump to the last non-blank character of the line gg - go to the first line of the document G - go to the last line of the document 5G - go to line 5 fx - jump to next occurrence of character x tx - jump to before next occurrence of character x Fx - jump to previous occurence of character x Tx - jump to after previous occurence of character x ; - repeat previous f, t, F or T movement , - repeat previous f, t, F or T movement, backwards } - jump to next paragraph (or function/block, when editing code) { - jump to previous paragraph (or function/block, when editing code) zz - center cursor on screen Ctrl + e - move screen down one line (without moving cursor) Ctrl + y - move screen up one line (without moving cursor) Ctrl + b - move back one full screen Ctrl + f - Ctrl + d - Ctrl + u - Search and replace Search and replace /pattern - search for pattern ?</description>
    </item>
    
  </channel>
</rss>
