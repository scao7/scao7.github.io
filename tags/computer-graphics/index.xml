<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Computer Graphics on Shengting Cao&#39;s  Notebook  ᕦʕ •ᴥ•ʔᕤ </title>
    <link>https://shengtingcao.top/tags/computer-graphics/</link>
    <description>Recent content in Computer Graphics on Shengting Cao&#39;s  Notebook  ᕦʕ •ᴥ•ʔᕤ </description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 25 Jan 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://shengtingcao.top/tags/computer-graphics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>WebGL for Koch Snowflake</title>
      <link>https://shengtingcao.top/blog/snoflake/</link>
      <pubDate>Fri, 25 Jan 2019 00:00:00 +0000</pubDate>
      <guid>https://shengtingcao.top/blog/snoflake/</guid>
      <description>&lt;h4 id=&#34;problem-description&#34;&gt;Problem Description&lt;/h4&gt;&#xA;&lt;p&gt;Draw the Koch snowflake using recursive method with javascript!&lt;/p&gt;&#xA;&lt;h4 id=&#34;calculate-the-point-for-the-koch-lines&#34;&gt;Calculate the point for the Koch lines&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;function calculatePoint(center, p){&#xA;  var angleInDegrees = 60;&#xA;  var angleInRadians = angleInDegrees * Math.PI / 180;&#xA;  var s1 = Math.sin(angleInRadians);&#xA;  var c1 = Math.cos(angleInRadians);&#xA;  var x1 = (p[0] - center[0]) * c1 - (p[1] - center[1])* s1 + center[0];&#xA;  var y1 = (p[0] - center[0]) * s1 + (p[1] - center[1])* c1 + center[1];&#xA;  var f = vec2(x1,y1);&#xA;  return f;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;divide-line-into-koch-line-and-call-the-function-recursively&#34;&gt;Divide line into koch line and call the function recursively&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;function divideLine(a, b,count)&#xA;{&#xA;  if(count === 0){&#xA;    var left;&#xA;    var right;&#xA;    left = mix(a,b,1/3);&#xA;    right = mix(a,b,2/3);&#xA;    var f = calculatePoint(left,right);&#xA;    drawLine(a,left,f,right,b);&#xA;  }&#xA;  else {&#xA;    var ab = mix (a,b,0.3333);&#xA;    var ba = mix (b,a,0.3333);&#xA;    var v = calculatePoint(ab, ba);&#xA;    count --;&#xA;    divideLine(a,ab,count);&#xA;    divideLine(ba,b,count);&#xA;    divideLine(ab,v,count);&#xA;    divideLine(v,ba,count);&#xA;  }&#xA;    return f;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h4 id=&#34;draw-a-snowflake-by-calling-the-divideline-function-three-times&#34;&gt;Draw a snowflake by calling the divideLine function three times&lt;/h4&gt;&#xA;&lt;pre&gt;&lt;code&gt;function snowflake(a,b,c,count){&#xA;    divideLine(a,b,count);&#xA;    divideLine(b,c,count);&#xA;    divideLine(c,a,count);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://scao7.github.io/ComputerGraphics/project1/snowflake.html&#34;&gt;Project Link&lt;/a&gt;&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
